// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package myfirstmodule.actions;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

import myfirstmodule.proxies.DummyEdge;
import myfirstmodule.proxies.DummyNode;
import myfirstmodule.proxies.Helper;
import myfirstmodule.proxies.Node;

import com.mendix.systemwideinterfaces.core.IMendixObject;

public class TransformDummyData extends CustomJavaAction<IMendixObject> {
	public TransformDummyData(IContext context) {
		super(context);
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception {
		// BEGIN USER CODE
		List<DummyEdge> dummyEdgeList = new ArrayList<>();
		Map<String, DummyNode> dummyNodeMap = new HashMap<>();

		List<IMendixObject> nodeList = Core.retrieveXPathQuery(getContext(),
				"//MyFirstModule.Node[MyFirstModule.Node_Rete/MyFirstModule.Rete/Title='my rete']");

		for (IMendixObject mo : nodeList) {
			Node node = Node.initialize(getContext(), mo);
			DummyNode dummyNode = new DummyNode(getContext());
			dummyNode.setLabel(node.getTitle());
			dummyNodeMap.put(mo.getId().toString(), dummyNode);
		}

		for (IMendixObject mo : nodeList) {
			Node node = Node.initialize(getContext(), mo);
			DummyNode source = dummyNodeMap.get(node.getMendixObject().getId().toString());

			switch (node.getNodeType()) {
				case Alpha:
				case Result:
					String target = node.getNode_Node_Type().getMendixObject().getId().toString();
					DummyEdge dummyEdge = new DummyEdge(getContext());
					dummyEdge.setDummyEdge_DummyNode_Source(source);
					dummyEdge.setDummyEdge_DummyNode_Target(dummyNodeMap.get(target));
					dummyEdgeList.add(dummyEdge);
					break;
				case Beta:
					String targetLeft = node.getNode_Node_Left().getMendixObject().getId().toString();
					String targetRight = node.getNode_Node_Right().getMendixObject().getId().toString();
					DummyEdge dummyEdgeLeft = new DummyEdge(getContext());
					DummyEdge dummyEdgeRight = new DummyEdge(getContext());

					dummyEdgeLeft.setDummyEdge_DummyNode_Source(dummyNodeMap.get(source));
					dummyEdgeRight.setDummyEdge_DummyNode_Source(dummyNodeMap.get(source));

					dummyEdgeLeft.setDummyEdge_DummyNode_Target(dummyNodeMap.get(targetLeft));
					dummyEdgeRight.setDummyEdge_DummyNode_Target(dummyNodeMap.get(targetRight));

					dummyEdgeList.add(dummyEdgeLeft);
					dummyEdgeList.add(dummyEdgeRight);
					break;
				default:
					break;
			}
		}

		Helper helper = new Helper(getContext());
		helper.setTitle("my rete");
		helper.setHelper_DummyEdge(dummyEdgeList);
		helper.setHelper_DummyNode(new ArrayList<DummyNode>(dummyNodeMap.values()));
		helper.commit();

		return helper.getMendixObject();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString() {
		return "TransformDummyData";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
